package com.atm;

import io.restassured.http.ContentType;
import io.restassured.response.Response;

import static org.junit.Assert.*;

import org.json.JSONObject;
import org.junit.*;

import static io.restassured.RestAssured.*;

public class AtmAPITest {

    @BeforeClass
    public static void setUp() {
        baseURI = "http://127.0.0.1:5000";
    }

    @After
    public void afterTest() {
        given().contentType(ContentType.JSON)
        .when()
        .post("/logout");
    }

    //@Test
    // Generated by Microsoft Copilot
    public void testUserAuthorizationFail() {
        Response response = given()
                .param("username", "validUser")
                .param("password", "securePassword")
                .when()
                .post("/authorize");

        response.then().statusCode(415);
    }

    //@Test
    public void testUserAuthorizationGood() {
        JSONObject body = new JSONObject();
        body.put("account_id", "2859459814");
        body.put("pin","7386");
        Response response = given().contentType(ContentType.JSON).body(body.toString())
                .when()
                .post("/authorize");
        response.then().statusCode(200);
        assertNotNull(response.body().asString());
    }

    //@Test
    // Created vy Microsoft Copilot but modified
    public void testUserLogoutNone() {
        Response response = given().contentType(ContentType.JSON)
                .header("Authorization", "Bearer validAccessToken")
                .when()
                .post("/logout");

        response.then().statusCode(401);
    }

    @Test
    // Created vy Microsoft Copilot but modified
    public void testUserLogoutGood() {
        JSONObject body = new JSONObject();
        body.put("account_id", "2859459814");
        body.put("pin","7386");
        Response response = given().contentType(ContentType.JSON).body(body.toString())
                .when()
                .post("/authorize");
        response.then().statusCode(200);
        response = given().contentType(ContentType.JSON)
                .when()
                .post("/logout");
        response.then().statusCode(200);
    }

    @Test
    public void testWithdrawalBad() {
        Response response = given().contentType(ContentType.JSON)
                .header("Authorization", "Bearer validAccessToken")
                .param("amount", 100) // Withdrawal amount
                .when()
                .post("/withdraw");

        response.then().statusCode(400);
        // Validate updated account balance
    }

    @Test
    public void testWithdrawalGood() {
        JSONObject body = new JSONObject();
        body.put("account_id", "2859459814");
        body.put("pin","7386");
        Response response = given().contentType(ContentType.JSON).body(body.toString())
                .when()
                .post("/authorize");
        body = new JSONObject();
        body.put("value", 100);
        response = given().contentType(ContentType.JSON).body(body.toString())
                .when()
                .post("/withdraw");

        response.then().statusCode(200);
        // Validate updated account balance
    }

    @Test
    public void testDeposit() {
        JSONObject body = new JSONObject();
        body.put("account_id", "2859459814");
        body.put("pin","7386");
        Response response = given().contentType(ContentType.JSON).body(body.toString())
                .when()
                .post("/authorize");
        body = new JSONObject();
        body.put("amount", 200);
        response = given().contentType(ContentType.JSON).body(body.toString())
                .when()
                .post("/deposit");

        response.then().statusCode(200);
        // Validate updated account balance
    }

    @Test
    public void testGetAccountBalance() {
        JSONObject body = new JSONObject();
        body.put("account_id", "2859459814");
        body.put("pin","7386");
        Response response = given().contentType(ContentType.JSON).body(body.toString())
                .when()
                .post("/authorize");
        response = given().contentType(ContentType.JSON)
                .header("Authorization", "Bearer validAccessToken")
                .when()
                .get("/balance");

        response.then().statusCode(200);
        // Extract and validate account balance
    }

    //@Test
    public void testTransactionHistory() {
        Response response = given()
                .header("Authorization", "Bearer validAccessToken")
                .when()
                .get("/history");

        response.then().statusCode(200);
        // Validate transaction history structure
    }
}
